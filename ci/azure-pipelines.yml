variables:
  - group: terraform-variables
  - name: organization
    value: $(System.CollectionUri)
  - name: project
    value: $(System.TeamProject)
  - name: repositoryId
    value: $(Build.Repository.ID)
  - name: pullRequestId
    value: $(System.PullRequest.PullRequestId)

pr:
  branches:
    include:
      - 'develop'

stages:
  - stage: Dev
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          - script: |
              curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
              sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
              sudo apt-get update && sudo apt-get install terraform
            displayName: 'Install Terraform'
          - script: |
              cd $(Build.SourcesDirectory)/infrastructure
              chmod +x ./deploy.sh
              ./deploy.sh dev
            displayName: 'DEV: deploy'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
          - script: |
              cd $(Build.SourcesDirectory)/tests
              npm install
              npm run test:infra-dev
            displayName: 'DEV: infra tests'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
          - script: |
              cd $(Build.SourcesDirectory)/tests
              npm install
              npm run test:api
            displayName: 'DEV: API tests'
            env:
              APP_URL: $(APP_URL)
          - script: |
              cd $(Build.SourcesDirectory)/infrastructure
              chmod +x ./destroy.sh
              ./destroy.sh dev
            displayName: 'DEV: destroy'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
            condition: succeededOrFailed()
  - stage: QA
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          - script: |
              curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
              sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
              sudo apt-get update && sudo apt-get install terraform
            displayName: 'Install Terraform'
          - script: |
              cd $(Build.SourcesDirectory)/infrastructure
              chmod +x ./deploy.sh
              ./deploy.sh qa
            displayName: 'QA: deploy'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
          - script: |
              cd $(Build.SourcesDirectory)/tests
              npm install
              npm run test:infra-qa
            displayName: 'QA: infra tests'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
          - script: |
              cd $(Build.SourcesDirectory)/tests
              npm install
              npm run test:api
            displayName: 'QA: API tests'
            env:
              APP_URL: $(APP_URL)
          - script: |
              cd $(Build.SourcesDirectory)/infrastructure
              chmod +x ./destroy.sh
              ./destroy.sh qa
            displayName: 'QA: destroy'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
            condition: succeededOrFailed()
  - stage: Merge_PR
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
          - script: |
              cd $(Build.SourcesDirectory)/ci
              chmod +x ./merge-pr.sh
              ./merge-pr.sh $(organization) $(project) $(repositoryId) $(pullRequestId) $(MERGE_PR_TOKEN)
            displayName: 'Merge PR'
            continueOnError: true